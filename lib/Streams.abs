//TODO efficient circular val[prmoises]

module Streams;

// the immutable-array operations
fimport IOVector from Data.Vector.Mutable;
fimport fromList from Data.Vector;
fimport indexM from Data.Vector;

// The mutable-array operations
fimport unsafeNew from Data.Vector.Mutable;
fimport read from Data.Vector.Mutable;
fimport write from Data.Vector.Mutable;

def Int bufSize() = 1000;


interface Stream {
	Stream clone();
	Maybe<Int> pull();
}

class NDref (Buffer b, Int cursor) implements Stream {
  Stream clone() {
	Stream temp = new NDref(b, cursor);
	return temp;
  }

  // sync call means async call + immediate get
  Maybe<Int> pull() {
	Fut<Fut<Maybe<Int>>> f;
	f = b!ndread(cursor); // it returns a future whether valued or not - different from null
	Fut<Maybe<Int>> f2 = f.get;
	Maybe<Int> v = f2.get;
	if (isJust(v))
		cursor = cursor + 1;
	return v;
  }
}

class Dref(Buffer b) implements Stream {
  Stream clone() {
	return this;
  }

// sync call means async call + immediate get
  Maybe<Int> pull() {
	Fut<Fut<Maybe<Int>>> f;
	f = b!dread(); // it returns a future whether valued or not - different from null
	Fut<Maybe<Int>> f2 = f.get;
	Maybe<Int> v = f2.get;
	return v;
  }
}

interface Buffer {
	Fut<Maybe<Int>> ndread(Int i);
	Fut<Maybe<Int>> dread();
	Unit yield(Int x);
	Unit terminate();
}



class Cbuffer implements Buffer{
IOVector<Fut<Maybe<Int>>> val;
Int size = bufSize()+1;
Int wrt = 0;
Int rd = 0;

  {
	// set the size of the stream buffer
	val = unsafeNew(size);
	Int i = 0;
	while(i<size) {
		Fut<Maybe<Int>> a = pro_new;
		write(val, i, a);
		i=i+1;
	} 
  }


  Fut<Maybe<Int>> ndread(Int i) {
	Fut<Maybe<Int>> f = read(val, i);
	return f;
  }

  Fut<Maybe<Int>> dread() {
	Fut<Maybe<Int>> f;
	f = read(val, rd);
	if (rd < wrt) {
		Maybe<Int> v = f.get;
		if (v != Nothing) 
			rd = rd+1;
	}
	else
		rd = rd+1;
	return f;
  }

  Unit yield(Int x) {
	this.yield_(Just(x));
  }

  Unit yield_(Maybe<Int> x) // successful or not
  {
	Fut<Maybe<Int>> f = read(val, wrt);
	f.pro_give(x);
	wrt = wrt + 1;
  }

  Unit terminate() {
	while(rd > wrt){// in case read faster than write
		Fut<Maybe<Int>> f = read(val, wrt);
		f.pro_give(Nothing);
		wrt = wrt + 1;
	}
	Fut<Maybe<Int>> f = read(val, wrt);
	f.pro_give(Nothing);
	wrt = wrt + 1;
  }
}








